
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
`define sensors_number 4
`define log_sensors_number 3
`define packet_value 3
`define log_packet_value 2

module DE2_115_Concentrator_top(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// Sma //////////
	input 		          		SMA_CLKIN,
	output		          		SMA_CLKOUT,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7,

	//////////// RS232 //////////
	input 		          		UART_CTS,
	output		          		UART_RTS,
	input 		          		UART_RXD,
	output		          		UART_TXD,

	//////////// SRAM //////////
	output		    [19:0]		SRAM_ADDR,
	output		          		SRAM_CE_N,
	inout 		    [15:0]		SRAM_DQ,
	output		          		SRAM_LB_N,
	output		          		SRAM_OE_N,
	output		          		SRAM_UB_N,
	output		          		SRAM_WE_N,

	output wire sink_ready,
	output wire [7:0]avalon_st_data,
	output wire avalon_st_valid,
	output wire avalon_st_startofpacket,
	output wire avalon_st_endofpacket
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


	wire reset_reset_n = 1;
	reg [31:0]st_cn = 32'b0;
	wire st;
	wire depress;
	wire button_state;
	
	wire rd_en_without_DMA_ready;
	wire trans_en_ok_rx;
	wire trans_en_CRC;
	
	wire [7:0]ver_data;
	wire [1:0]ver_ok_rx;

//=======================================================
//  Structural coding
//=======================================================

	/*always @(posedge CLOCK_50)
	begin
		st_cn <= st ? 32'b0 : st_cn + 32'b1;
	end*/
	
	assign LEDR = SW ^ {ver_ok_rx, avalon_st_endofpacket, avalon_st_startofpacket, ver_data, rd_en_without_DMA_ready, trans_en_ok_rx, trans_en_CRC, st, avalon_st_valid, sink_ready};
	assign LEDG[0] = button_state;

	button button (
		.clk(CLOCK_50),
		.key(KEY[0]),
		.moment_of_press(st),
		.moment_of_depress(depress),
		.state(button_state));
	
	top_check_Concentrator top_check_Concentrator(
		.clk(CLOCK_50),
		.st(st),
		.sink_ready(sink_ready),
		.avalon_st_data(avalon_st_data),
		.avalon_st_valid(avalon_st_valid),
		.avalon_st_startofpacket(avalon_st_startofpacket),
		.avalon_st_endofpacket(avalon_st_endofpacket),
		.rd_en_without_DMA_ready(rd_en_without_DMA_ready),
		.trans_en_ok_rx(trans_en_ok_rx),
		.trans_en_CRC(trans_en_CRC),
		.ver_data(ver_data),
		.ver_ok_rx(ver_ok_rx));
	
	IP_DMA IP_DMA(
		.avalon_st_data_data(avalon_st_data),          // avalon_st_data.data
		.avalon_st_data_valid(avalon_st_valid),         //               .valid
		.avalon_st_data_ready(sink_ready),         //               .ready
		.avalon_st_data_startofpacket(avalon_st_startofpacket), //               .startofpacket
		.avalon_st_data_endofpacket(avalon_st_endofpacket),   //               .endofpacket
		.clk_clk(CLOCK_50),                      //            clk.clk
		.reset_reset_n(reset_reset_n));


endmodule
